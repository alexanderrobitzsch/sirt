// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// gooijer_csn_table
Rcpp::List gooijer_csn_table(Rcpp::NumericMatrix dat, Rcpp::NumericMatrix dat_perm, int RR, int NS, int progress, Rcpp::NumericVector progress_vec, Rcpp::NumericMatrix score_index);
RcppExport SEXP _sirt_gooijer_csn_table(SEXP datSEXP, SEXP dat_permSEXP, SEXP RRSEXP, SEXP NSSEXP, SEXP progressSEXP, SEXP progress_vecSEXP, SEXP score_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat_perm(dat_permSEXP);
    Rcpp::traits::input_parameter< int >::type RR(RRSEXP);
    Rcpp::traits::input_parameter< int >::type NS(NSSEXP);
    Rcpp::traits::input_parameter< int >::type progress(progressSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type progress_vec(progress_vecSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type score_index(score_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(gooijer_csn_table(dat, dat_perm, RR, NS, progress, progress_vec, score_index));
    return rcpp_result_gen;
END_RCPP
}
// isop_tests_C
Rcpp::List isop_tests_C(Rcpp::NumericMatrix dat, Rcpp::NumericMatrix dat_resp, Rcpp::NumericVector weights, Rcpp::NumericVector jackunits, int JJ);
RcppExport SEXP _sirt_isop_tests_C(SEXP datSEXP, SEXP dat_respSEXP, SEXP weightsSEXP, SEXP jackunitsSEXP, SEXP JJSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type jackunits(jackunitsSEXP);
    Rcpp::traits::input_parameter< int >::type JJ(JJSEXP);
    rcpp_result_gen = Rcpp::wrap(isop_tests_C(dat, dat_resp, weights, jackunits, JJ));
    return rcpp_result_gen;
END_RCPP
}
// interval_index_C
Rcpp::NumericVector interval_index_C(Rcpp::NumericMatrix MATR, Rcpp::NumericVector RN);
RcppExport SEXP _sirt_interval_index_C(SEXP MATRSEXP, SEXP RNSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type MATR(MATRSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type RN(RNSEXP);
    rcpp_result_gen = Rcpp::wrap(interval_index_C(MATR, RN));
    return rcpp_result_gen;
END_RCPP
}
// rowCumsums2_source
Rcpp::NumericMatrix rowCumsums2_source(Rcpp::NumericMatrix input);
RcppExport SEXP _sirt_rowCumsums2_source(SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type input(inputSEXP);
    rcpp_result_gen = Rcpp::wrap(rowCumsums2_source(input));
    return rcpp_result_gen;
END_RCPP
}
// rowKSmallest_C
Rcpp::List rowKSmallest_C(Rcpp::NumericMatrix MATR, Rcpp::IntegerVector KK1, Rcpp::NumericMatrix INDEXMATR, Rcpp::NumericMatrix RNMATR);
RcppExport SEXP _sirt_rowKSmallest_C(SEXP MATRSEXP, SEXP KK1SEXP, SEXP INDEXMATRSEXP, SEXP RNMATRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type MATR(MATRSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type KK1(KK1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type INDEXMATR(INDEXMATRSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type RNMATR(RNMATRSEXP);
    rcpp_result_gen = Rcpp::wrap(rowKSmallest_C(MATR, KK1, INDEXMATR, RNMATR));
    return rcpp_result_gen;
END_RCPP
}
// rowMaxsCPP_source
Rcpp::List rowMaxsCPP_source(Rcpp::NumericMatrix MATR);
RcppExport SEXP _sirt_rowMaxsCPP_source(SEXP MATRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type MATR(MATRSEXP);
    rcpp_result_gen = Rcpp::wrap(rowMaxsCPP_source(MATR));
    return rcpp_result_gen;
END_RCPP
}
// rowmins2_bundle_C
Rcpp::NumericMatrix rowmins2_bundle_C(Rcpp::NumericMatrix m1, Rcpp::NumericVector v1);
RcppExport SEXP _sirt_rowmins2_bundle_C(SEXP m1SEXP, SEXP v1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m1(m1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v1(v1SEXP);
    rcpp_result_gen = Rcpp::wrap(rowmins2_bundle_C(m1, v1));
    return rcpp_result_gen;
END_RCPP
}
// calc_copula_itemcluster_C
Rcpp::List calc_copula_itemcluster_C(Rcpp::NumericVector DD, Rcpp::NumericMatrix res);
RcppExport SEXP _sirt_calc_copula_itemcluster_C(SEXP DDSEXP, SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type DD(DDSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type res(resSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_copula_itemcluster_C(DD, res));
    return rcpp_result_gen;
END_RCPP
}
// md_pattern_csource
Rcpp::List md_pattern_csource(Rcpp::NumericMatrix dat);
RcppExport SEXP _sirt_md_pattern_csource(SEXP datSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    rcpp_result_gen = Rcpp::wrap(md_pattern_csource(dat));
    return rcpp_result_gen;
END_RCPP
}
// mle_pcm_group_C
Rcpp::List mle_pcm_group_C(Rcpp::NumericMatrix dat, Rcpp::NumericMatrix dat_resp, Rcpp::NumericMatrix groupM, Rcpp::NumericMatrix b, Rcpp::NumericVector a, Rcpp::NumericVector maxK, Rcpp::NumericVector theta0, double conv, int maxiter);
RcppExport SEXP _sirt_mle_pcm_group_C(SEXP datSEXP, SEXP dat_respSEXP, SEXP groupMSEXP, SEXP bSEXP, SEXP aSEXP, SEXP maxKSEXP, SEXP theta0SEXP, SEXP convSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type groupM(groupMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(mle_pcm_group_C(dat, dat_resp, groupM, b, a, maxK, theta0, conv, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// mle_pcm_C
Rcpp::List mle_pcm_C(Rcpp::NumericMatrix dat, Rcpp::NumericMatrix dat_resp, Rcpp::NumericMatrix b, Rcpp::NumericVector a, Rcpp::NumericVector maxK, Rcpp::NumericVector theta0, double conv, int maxiter);
RcppExport SEXP _sirt_mle_pcm_C(SEXP datSEXP, SEXP dat_respSEXP, SEXP bSEXP, SEXP aSEXP, SEXP maxKSEXP, SEXP theta0SEXP, SEXP convSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta0(theta0SEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(mle_pcm_C(dat, dat_resp, b, a, maxK, theta0, conv, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// probs_pcm_groups_C
Rcpp::List probs_pcm_groups_C(Rcpp::NumericMatrix dat, Rcpp::NumericMatrix dat_resp, Rcpp::NumericVector group, Rcpp::NumericMatrix probs, int CC, int TP);
RcppExport SEXP _sirt_probs_pcm_groups_C(SEXP datSEXP, SEXP dat_respSEXP, SEXP groupSEXP, SEXP probsSEXP, SEXP CCSEXP, SEXP TPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< int >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< int >::type TP(TPSEXP);
    rcpp_result_gen = Rcpp::wrap(probs_pcm_groups_C(dat, dat_resp, group, probs, CC, TP));
    return rcpp_result_gen;
END_RCPP
}
// probs_pcm_nogroups_C
Rcpp::List probs_pcm_nogroups_C(Rcpp::NumericMatrix dat, Rcpp::NumericMatrix dat_resp, Rcpp::NumericMatrix probs, int CC, int TP);
RcppExport SEXP _sirt_probs_pcm_nogroups_C(SEXP datSEXP, SEXP dat_respSEXP, SEXP probsSEXP, SEXP CCSEXP, SEXP TPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< int >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< int >::type TP(TPSEXP);
    rcpp_result_gen = Rcpp::wrap(probs_pcm_nogroups_C(dat, dat_resp, probs, CC, TP));
    return rcpp_result_gen;
END_RCPP
}
// calccounts_pcm_groups_C
Rcpp::List calccounts_pcm_groups_C(Rcpp::NumericMatrix dat, Rcpp::NumericMatrix dat_resp, Rcpp::NumericVector group, Rcpp::NumericMatrix fyiqk, Rcpp::NumericMatrix pik, int CC, Rcpp::NumericVector weights);
RcppExport SEXP _sirt_calccounts_pcm_groups_C(SEXP datSEXP, SEXP dat_respSEXP, SEXP groupSEXP, SEXP fyiqkSEXP, SEXP pikSEXP, SEXP CCSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type group(groupSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type fyiqk(fyiqkSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< int >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(calccounts_pcm_groups_C(dat, dat_resp, group, fyiqk, pik, CC, weights));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_array_mult
Rcpp::NumericMatrix sirt_rcpp_array_mult(Rcpp::NumericMatrix AA, Rcpp::NumericVector dimAA, Rcpp::NumericMatrix BB, Rcpp::NumericVector dimBB);
RcppExport SEXP _sirt_sirt_rcpp_array_mult(SEXP AASEXP, SEXP dimAASEXP, SEXP BBSEXP, SEXP dimBBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type AA(AASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dimAA(dimAASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type BB(BBSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type dimBB(dimBBSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_array_mult(AA, dimAA, BB, dimBB));
    return rcpp_result_gen;
END_RCPP
}
// RM_CALCPOST
Rcpp::List RM_CALCPOST(Rcpp::NumericMatrix DAT2, Rcpp::NumericMatrix DAT2RESP, Rcpp::NumericMatrix PROBS, Rcpp::NumericVector KK);
RcppExport SEXP _sirt_RM_CALCPOST(SEXP DAT2SEXP, SEXP DAT2RESPSEXP, SEXP PROBSSEXP, SEXP KKSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2(DAT2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2RESP(DAT2RESPSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PROBS(PROBSSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type KK(KKSEXP);
    rcpp_result_gen = Rcpp::wrap(RM_CALCPOST(DAT2, DAT2RESP, PROBS, KK));
    return rcpp_result_gen;
END_RCPP
}
// rm_probraterfct1
Rcpp::List rm_probraterfct1(Rcpp::NumericMatrix CRA, Rcpp::NumericVector DRA, Rcpp::IntegerVector dimAA, Rcpp::NumericMatrix BB, Rcpp::IntegerVector dimBB);
RcppExport SEXP _sirt_rm_probraterfct1(SEXP CRASEXP, SEXP DRASEXP, SEXP dimAASEXP, SEXP BBSEXP, SEXP dimBBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type CRA(CRASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type DRA(DRASEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dimAA(dimAASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type BB(BBSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type dimBB(dimBBSEXP);
    rcpp_result_gen = Rcpp::wrap(rm_probraterfct1(CRA, DRA, dimAA, BB, dimBB));
    return rcpp_result_gen;
END_RCPP
}
// rm_facets_calcprobs_cpp
Rcpp::NumericMatrix rm_facets_calcprobs_cpp(Rcpp::NumericVector b_item, Rcpp::NumericVector b_rater, Rcpp::NumericMatrix Qmatrix, Rcpp::NumericMatrix tau_item, int K, int I, int TP, Rcpp::NumericVector a_item, Rcpp::NumericVector a_rater, Rcpp::NumericVector item_index, Rcpp::NumericVector rater_index, Rcpp::NumericVector theta_k);
RcppExport SEXP _sirt_rm_facets_calcprobs_cpp(SEXP b_itemSEXP, SEXP b_raterSEXP, SEXP QmatrixSEXP, SEXP tau_itemSEXP, SEXP KSEXP, SEXP ISEXP, SEXP TPSEXP, SEXP a_itemSEXP, SEXP a_raterSEXP, SEXP item_indexSEXP, SEXP rater_indexSEXP, SEXP theta_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b_item(b_itemSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b_rater(b_raterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Qmatrix(QmatrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type tau_item(tau_itemSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type TP(TPSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a_item(a_itemSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a_rater(a_raterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type item_index(item_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rater_index(rater_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta_k(theta_kSEXP);
    rcpp_result_gen = Rcpp::wrap(rm_facets_calcprobs_cpp(b_item, b_rater, Qmatrix, tau_item, K, I, TP, a_item, a_rater, item_index, rater_index, theta_k));
    return rcpp_result_gen;
END_RCPP
}
// SMIRT_CALCPOST
Rcpp::List SMIRT_CALCPOST(Rcpp::IntegerMatrix DAT2, Rcpp::IntegerMatrix DAT2RESP, Rcpp::NumericMatrix PROBS, Rcpp::NumericMatrix DAT2IND, Rcpp::NumericVector PIK, Rcpp::NumericVector KK1);
RcppExport SEXP _sirt_SMIRT_CALCPOST(SEXP DAT2SEXP, SEXP DAT2RESPSEXP, SEXP PROBSSEXP, SEXP DAT2INDSEXP, SEXP PIKSEXP, SEXP KK1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type DAT2(DAT2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type DAT2RESP(DAT2RESPSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PROBS(PROBSSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2IND(DAT2INDSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type PIK(PIKSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type KK1(KK1SEXP);
    rcpp_result_gen = Rcpp::wrap(SMIRT_CALCPOST(DAT2, DAT2RESP, PROBS, DAT2IND, PIK, KK1));
    return rcpp_result_gen;
END_RCPP
}
// SMIRT_CALCPROB_COMP
Rcpp::NumericMatrix SMIRT_CALCPROB_COMP(Rcpp::NumericMatrix A, Rcpp::NumericVector B, Rcpp::NumericMatrix QQ, Rcpp::NumericMatrix THETA, Rcpp::NumericVector CC, Rcpp::NumericVector DD);
RcppExport SEXP _sirt_SMIRT_CALCPROB_COMP(SEXP ASEXP, SEXP BSEXP, SEXP QQSEXP, SEXP THETASEXP, SEXP CCSEXP, SEXP DDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type B(BSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type QQ(QQSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type DD(DDSEXP);
    rcpp_result_gen = Rcpp::wrap(SMIRT_CALCPROB_COMP(A, B, QQ, THETA, CC, DD));
    return rcpp_result_gen;
END_RCPP
}
// SMIRT_CALCPROB_NONCOMP
Rcpp::NumericMatrix SMIRT_CALCPROB_NONCOMP(Rcpp::NumericMatrix A, Rcpp::NumericMatrix B, Rcpp::NumericMatrix QQ, Rcpp::NumericMatrix THETA, Rcpp::NumericVector CC, Rcpp::NumericVector DD);
RcppExport SEXP _sirt_SMIRT_CALCPROB_NONCOMP(SEXP ASEXP, SEXP BSEXP, SEXP QQSEXP, SEXP THETASEXP, SEXP CCSEXP, SEXP DDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type QQ(QQSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type DD(DDSEXP);
    rcpp_result_gen = Rcpp::wrap(SMIRT_CALCPROB_NONCOMP(A, B, QQ, THETA, CC, DD));
    return rcpp_result_gen;
END_RCPP
}
// SMIRT_CALCPROB_PARTCOMP
Rcpp::NumericMatrix SMIRT_CALCPROB_PARTCOMP(Rcpp::NumericMatrix A, Rcpp::NumericMatrix B, Rcpp::NumericMatrix QQ, Rcpp::NumericMatrix THETA, Rcpp::NumericVector CC, Rcpp::NumericVector DD, Rcpp::NumericVector MUI);
RcppExport SEXP _sirt_SMIRT_CALCPROB_PARTCOMP(SEXP ASEXP, SEXP BSEXP, SEXP QQSEXP, SEXP THETASEXP, SEXP CCSEXP, SEXP DDSEXP, SEXP MUISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type QQ(QQSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type CC(CCSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type DD(DDSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type MUI(MUISEXP);
    rcpp_result_gen = Rcpp::wrap(SMIRT_CALCPROB_PARTCOMP(A, B, QQ, THETA, CC, DD, MUI));
    return rcpp_result_gen;
END_RCPP
}
// MML2_RASCHTYPE_COUNTS
Rcpp::List MML2_RASCHTYPE_COUNTS(Rcpp::NumericMatrix DAT2, Rcpp::NumericMatrix DAT2RESP, Rcpp::NumericVector DAT1, Rcpp::NumericMatrix FQKYI, Rcpp::NumericVector PIK, Rcpp::NumericMatrix FYIQK);
RcppExport SEXP _sirt_MML2_RASCHTYPE_COUNTS(SEXP DAT2SEXP, SEXP DAT2RESPSEXP, SEXP DAT1SEXP, SEXP FQKYISEXP, SEXP PIKSEXP, SEXP FYIQKSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2(DAT2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2RESP(DAT2RESPSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type DAT1(DAT1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type FQKYI(FQKYISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type PIK(PIKSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type FYIQK(FYIQKSEXP);
    rcpp_result_gen = Rcpp::wrap(MML2_RASCHTYPE_COUNTS(DAT2, DAT2RESP, DAT1, FQKYI, PIK, FYIQK));
    return rcpp_result_gen;
END_RCPP
}
// MML2_CALCPOST_V1
Rcpp::List MML2_CALCPOST_V1(Rcpp::NumericMatrix DAT2, Rcpp::NumericMatrix DAT2RESP, Rcpp::NumericMatrix PROBS);
RcppExport SEXP _sirt_MML2_CALCPOST_V1(SEXP DAT2SEXP, SEXP DAT2RESPSEXP, SEXP PROBSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2(DAT2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2RESP(DAT2RESPSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PROBS(PROBSSEXP);
    rcpp_result_gen = Rcpp::wrap(MML2_CALCPOST_V1(DAT2, DAT2RESP, PROBS));
    return rcpp_result_gen;
END_RCPP
}
// MML2_CALCPOST_V2
Rcpp::List MML2_CALCPOST_V2(Rcpp::NumericMatrix DAT2, Rcpp::NumericMatrix DAT2RESP, Rcpp::NumericMatrix PROBS);
RcppExport SEXP _sirt_MML2_CALCPOST_V2(SEXP DAT2SEXP, SEXP DAT2RESPSEXP, SEXP PROBSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2(DAT2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2RESP(DAT2RESPSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PROBS(PROBSSEXP);
    rcpp_result_gen = Rcpp::wrap(MML2_CALCPOST_V2(DAT2, DAT2RESP, PROBS));
    return rcpp_result_gen;
END_RCPP
}
// MML2_CALCPOST_V3
Rcpp::List MML2_CALCPOST_V3(Rcpp::NumericMatrix DAT2, Rcpp::NumericMatrix DAT2RESP, Rcpp::NumericMatrix PROBS);
RcppExport SEXP _sirt_MML2_CALCPOST_V3(SEXP DAT2SEXP, SEXP DAT2RESPSEXP, SEXP PROBSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2(DAT2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2RESP(DAT2RESPSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PROBS(PROBSSEXP);
    rcpp_result_gen = Rcpp::wrap(MML2_CALCPOST_V3(DAT2, DAT2RESP, PROBS));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_first_eigenvalue
Rcpp::List sirt_rcpp_first_eigenvalue(arma::mat X, int maxit, double conv, double K);
RcppExport SEXP _sirt_sirt_rcpp_first_eigenvalue(SEXP XSEXP, SEXP maxitSEXP, SEXP convSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_first_eigenvalue(X, maxit, conv, K));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_D_eigenvalues
Rcpp::List sirt_rcpp_D_eigenvalues(Rcpp::NumericMatrix Xr, int D, int maxit, double conv);
RcppExport SEXP _sirt_sirt_rcpp_D_eigenvalues(SEXP XrSEXP, SEXP DSEXP, SEXP maxitSEXP, SEXP convSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Xr(XrSEXP);
    Rcpp::traits::input_parameter< int >::type D(DSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_D_eigenvalues(Xr, D, maxit, conv));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_choppin_row_averaging
Rcpp::NumericVector sirt_rcpp_choppin_row_averaging(arma::mat B, int I, double priorweight);
RcppExport SEXP _sirt_sirt_rcpp_choppin_row_averaging(SEXP BSEXP, SEXP ISEXP, SEXP priorweightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< double >::type priorweight(priorweightSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_choppin_row_averaging(B, I, priorweight));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_evm_compute
Rcpp::List sirt_rcpp_evm_compute(arma::mat B, int I, int powD, int maxit, double conv, double K);
RcppExport SEXP _sirt_sirt_rcpp_evm_compute(SEXP BSEXP, SEXP ISEXP, SEXP powDSEXP, SEXP maxitSEXP, SEXP convSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type powD(powDSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_evm_compute(B, I, powD, maxit, conv, K));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_evm_comp_poly
Rcpp::List sirt_rcpp_evm_comp_poly(Rcpp::NumericMatrix dat, Rcpp::NumericMatrix dat_resp, Rcpp::NumericVector weights, int JJ, Rcpp::NumericVector jackunits, int powD, int progress_, Rcpp::NumericMatrix row_index, Rcpp::NumericMatrix col_index);
RcppExport SEXP _sirt_sirt_rcpp_evm_comp_poly(SEXP datSEXP, SEXP dat_respSEXP, SEXP weightsSEXP, SEXP JJSEXP, SEXP jackunitsSEXP, SEXP powDSEXP, SEXP progress_SEXP, SEXP row_indexSEXP, SEXP col_indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type JJ(JJSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type jackunits(jackunitsSEXP);
    Rcpp::traits::input_parameter< int >::type powD(powDSEXP);
    Rcpp::traits::input_parameter< int >::type progress_(progress_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type row_index(row_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type col_index(col_indexSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_evm_comp_poly(dat, dat_resp, weights, JJ, jackunits, powD, progress_, row_index, col_index));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_gom_em_calcpost
Rcpp::List sirt_rcpp_gom_em_calcpost(Rcpp::IntegerMatrix DAT2, Rcpp::IntegerMatrix DAT2RESP, Rcpp::NumericMatrix PROBS, Rcpp::NumericMatrix DAT2IND, Rcpp::NumericVector PIK, Rcpp::NumericVector KK1, Rcpp::NumericVector weights);
RcppExport SEXP _sirt_sirt_rcpp_gom_em_calcpost(SEXP DAT2SEXP, SEXP DAT2RESPSEXP, SEXP PROBSSEXP, SEXP DAT2INDSEXP, SEXP PIKSEXP, SEXP KK1SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type DAT2(DAT2SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type DAT2RESP(DAT2RESPSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PROBS(PROBSSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type DAT2IND(DAT2INDSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type PIK(PIKSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type KK1(KK1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_gom_em_calcpost(DAT2, DAT2RESP, PROBS, DAT2IND, PIK, KK1, weights));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_gom_em_likelihood
Rcpp::NumericMatrix sirt_rcpp_gom_em_likelihood(Rcpp::NumericVector probs, int ncat, int TP, Rcpp::IntegerMatrix dat2, Rcpp::LogicalMatrix dat2resp);
RcppExport SEXP _sirt_sirt_rcpp_gom_em_likelihood(SEXP probsSEXP, SEXP ncatSEXP, SEXP TPSEXP, SEXP dat2SEXP, SEXP dat2respSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< int >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< int >::type TP(TPSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat2(dat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type dat2resp(dat2respSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_gom_em_likelihood(probs, ncat, TP, dat2, dat2resp));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_gom_em_log_likelihood
double sirt_rcpp_gom_em_log_likelihood(Rcpp::NumericMatrix fyiqk, Rcpp::NumericVector pik, Rcpp::NumericVector weights);
RcppExport SEXP _sirt_sirt_rcpp_gom_em_log_likelihood(SEXP fyiqkSEXP, SEXP pikSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type fyiqk(fyiqkSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_gom_em_log_likelihood(fyiqk, pik, weights));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_gom_em_loglike_gradient
Rcpp::NumericVector sirt_rcpp_gom_em_loglike_gradient(Rcpp::NumericVector probs, Rcpp::NumericVector probs_h, int ncat, int TP, Rcpp::IntegerMatrix dat2, Rcpp::LogicalMatrix dat2resp, Rcpp::NumericVector pik, Rcpp::IntegerVector items, Rcpp::NumericMatrix fyiqk, Rcpp::NumericVector weights);
RcppExport SEXP _sirt_sirt_rcpp_gom_em_loglike_gradient(SEXP probsSEXP, SEXP probs_hSEXP, SEXP ncatSEXP, SEXP TPSEXP, SEXP dat2SEXP, SEXP dat2respSEXP, SEXP pikSEXP, SEXP itemsSEXP, SEXP fyiqkSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type probs_h(probs_hSEXP);
    Rcpp::traits::input_parameter< int >::type ncat(ncatSEXP);
    Rcpp::traits::input_parameter< int >::type TP(TPSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat2(dat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type dat2resp(dat2respSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pik(pikSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type items(itemsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type fyiqk(fyiqkSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_gom_em_loglike_gradient(probs, probs_h, ncat, TP, dat2, dat2resp, pik, items, fyiqk, weights));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_inference_jackknife
Rcpp::List sirt_rcpp_inference_jackknife(Rcpp::NumericMatrix PARS);
RcppExport SEXP _sirt_sirt_rcpp_inference_jackknife(SEXP PARSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type PARS(PARSSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_inference_jackknife(PARS));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_invariance_alignment_lambda_transformed
Rcpp::NumericMatrix sirt_rcpp_invariance_alignment_lambda_transformed(Rcpp::NumericMatrix lambda, Rcpp::NumericVector psi0);
RcppExport SEXP _sirt_sirt_rcpp_invariance_alignment_lambda_transformed(SEXP lambdaSEXP, SEXP psi0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi0(psi0SEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_invariance_alignment_lambda_transformed(lambda, psi0));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_invariance_alignment_nu_transformed
Rcpp::NumericMatrix sirt_rcpp_invariance_alignment_nu_transformed(Rcpp::NumericMatrix nu, Rcpp::NumericMatrix lambda, Rcpp::NumericVector alpha0, Rcpp::NumericVector psi0, bool reparam);
RcppExport SEXP _sirt_sirt_rcpp_invariance_alignment_nu_transformed(SEXP nuSEXP, SEXP lambdaSEXP, SEXP alpha0SEXP, SEXP psi0SEXP, SEXP reparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi0(psi0SEXP);
    Rcpp::traits::input_parameter< bool >::type reparam(reparamSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_invariance_alignment_nu_transformed(nu, lambda, alpha0, psi0, reparam));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_invariance_alignment_simplicity_function_value
double sirt_rcpp_invariance_alignment_simplicity_function_value(Rcpp::CharacterVector type, double parm1, double parm2, double scale, double power, double eps);
RcppExport SEXP _sirt_sirt_rcpp_invariance_alignment_simplicity_function_value(SEXP typeSEXP, SEXP parm1SEXP, SEXP parm2SEXP, SEXP scaleSEXP, SEXP powerSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type parm1(parm1SEXP);
    Rcpp::traits::input_parameter< double >::type parm2(parm2SEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_invariance_alignment_simplicity_function_value(type, parm1, parm2, scale, power, eps));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_invariance_alignment_opt_fct
Rcpp::List sirt_rcpp_invariance_alignment_opt_fct(Rcpp::NumericMatrix nu, Rcpp::NumericMatrix lambda, Rcpp::NumericVector alpha0, Rcpp::NumericVector psi0, Rcpp::IntegerMatrix group_combis, Rcpp::NumericMatrix wgt, Rcpp::NumericVector align_scale, Rcpp::NumericVector align_pow, double eps, Rcpp::NumericMatrix wgt_combi, Rcpp::CharacterVector type, bool reparam);
RcppExport SEXP _sirt_sirt_rcpp_invariance_alignment_opt_fct(SEXP nuSEXP, SEXP lambdaSEXP, SEXP alpha0SEXP, SEXP psi0SEXP, SEXP group_combisSEXP, SEXP wgtSEXP, SEXP align_scaleSEXP, SEXP align_powSEXP, SEXP epsSEXP, SEXP wgt_combiSEXP, SEXP typeSEXP, SEXP reparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi0(psi0SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type group_combis(group_combisSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type wgt(wgtSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type align_scale(align_scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type align_pow(align_powSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type wgt_combi(wgt_combiSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type reparam(reparamSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_invariance_alignment_opt_fct(nu, lambda, alpha0, psi0, group_combis, wgt, align_scale, align_pow, eps, wgt_combi, type, reparam));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_invariance_alignment_simplicity_function_gradient
double sirt_rcpp_invariance_alignment_simplicity_function_gradient(Rcpp::CharacterVector type, double parm1, double parm2, double scale, double power, double eps);
RcppExport SEXP _sirt_sirt_rcpp_invariance_alignment_simplicity_function_gradient(SEXP typeSEXP, SEXP parm1SEXP, SEXP parm2SEXP, SEXP scaleSEXP, SEXP powerSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type parm1(parm1SEXP);
    Rcpp::traits::input_parameter< double >::type parm2(parm2SEXP);
    Rcpp::traits::input_parameter< double >::type scale(scaleSEXP);
    Rcpp::traits::input_parameter< double >::type power(powerSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_invariance_alignment_simplicity_function_gradient(type, parm1, parm2, scale, power, eps));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_invariance_alignment_opt_grad
Rcpp::NumericVector sirt_rcpp_invariance_alignment_opt_grad(Rcpp::NumericMatrix nu, Rcpp::NumericMatrix lambda, Rcpp::NumericVector alpha0, Rcpp::NumericVector psi0, Rcpp::IntegerMatrix group_combis, Rcpp::NumericMatrix wgt, Rcpp::NumericVector align_scale, Rcpp::NumericVector align_pow, double eps, Rcpp::NumericMatrix wgt_combi, Rcpp::CharacterVector type, bool reparam);
RcppExport SEXP _sirt_sirt_rcpp_invariance_alignment_opt_grad(SEXP nuSEXP, SEXP lambdaSEXP, SEXP alpha0SEXP, SEXP psi0SEXP, SEXP group_combisSEXP, SEXP wgtSEXP, SEXP align_scaleSEXP, SEXP align_powSEXP, SEXP epsSEXP, SEXP wgt_combiSEXP, SEXP typeSEXP, SEXP reparamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alpha0(alpha0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type psi0(psi0SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type group_combis(group_combisSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type wgt(wgtSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type align_scale(align_scaleSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type align_pow(align_powSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type wgt_combi(wgt_combiSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type reparam(reparamSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_invariance_alignment_opt_grad(nu, lambda, alpha0, psi0, group_combis, wgt, align_scale, align_pow, eps, wgt_combi, type, reparam));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_linking_haebara_fct_optim_one_item
double sirt_rcpp_linking_haebara_fct_optim_one_item(Rcpp::NumericVector theta, Rcpp::NumericVector prob_theta, Rcpp::NumericMatrix aM, Rcpp::NumericMatrix bM, Rcpp::NumericVector a, Rcpp::NumericVector b, Rcpp::NumericVector mu, Rcpp::NumericVector sigma, int ii, int ss, Rcpp::CharacterVector dist, double eps);
RcppExport SEXP _sirt_sirt_rcpp_linking_haebara_fct_optim_one_item(SEXP thetaSEXP, SEXP prob_thetaSEXP, SEXP aMSEXP, SEXP bMSEXP, SEXP aSEXP, SEXP bSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP iiSEXP, SEXP ssSEXP, SEXP distSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prob_theta(prob_thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type aM(aMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type bM(bMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_linking_haebara_fct_optim_one_item(theta, prob_theta, aM, bM, a, b, mu, sigma, ii, ss, dist, eps));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_linking_haebara_fct_optim
double sirt_rcpp_linking_haebara_fct_optim(int NI, int NS, Rcpp::CharacterVector dist, Rcpp::NumericMatrix aM, Rcpp::NumericMatrix bM, Rcpp::NumericVector theta, Rcpp::NumericVector prob_theta, Rcpp::LogicalMatrix est_pars, Rcpp::NumericMatrix wgtM, Rcpp::NumericVector a, Rcpp::NumericVector b, Rcpp::NumericVector mu, Rcpp::NumericVector sigma, double eps);
RcppExport SEXP _sirt_sirt_rcpp_linking_haebara_fct_optim(SEXP NISEXP, SEXP NSSEXP, SEXP distSEXP, SEXP aMSEXP, SEXP bMSEXP, SEXP thetaSEXP, SEXP prob_thetaSEXP, SEXP est_parsSEXP, SEXP wgtMSEXP, SEXP aSEXP, SEXP bSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type NI(NISEXP);
    Rcpp::traits::input_parameter< int >::type NS(NSSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type aM(aMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type bM(bMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prob_theta(prob_thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type est_pars(est_parsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type wgtM(wgtMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_linking_haebara_fct_optim(NI, NS, dist, aM, bM, theta, prob_theta, est_pars, wgtM, a, b, mu, sigma, eps));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_linking_haebara_grad_optim_one_item
Rcpp::NumericVector sirt_rcpp_linking_haebara_grad_optim_one_item(Rcpp::NumericVector theta, Rcpp::NumericVector prob_theta, Rcpp::NumericMatrix aM, Rcpp::NumericMatrix bM, Rcpp::NumericVector a, Rcpp::NumericVector b, Rcpp::NumericVector mu, Rcpp::NumericVector sigma, int ii, int ss, Rcpp::CharacterVector dist, double eps, int NI, int NS, Rcpp::IntegerVector index_a, Rcpp::IntegerVector index_b, Rcpp::IntegerVector index_mu, Rcpp::IntegerVector index_sigma, Rcpp::NumericMatrix wgtM, Rcpp::NumericVector grad0);
RcppExport SEXP _sirt_sirt_rcpp_linking_haebara_grad_optim_one_item(SEXP thetaSEXP, SEXP prob_thetaSEXP, SEXP aMSEXP, SEXP bMSEXP, SEXP aSEXP, SEXP bSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP iiSEXP, SEXP ssSEXP, SEXP distSEXP, SEXP epsSEXP, SEXP NISEXP, SEXP NSSEXP, SEXP index_aSEXP, SEXP index_bSEXP, SEXP index_muSEXP, SEXP index_sigmaSEXP, SEXP wgtMSEXP, SEXP grad0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prob_theta(prob_thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type aM(aMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type bM(bMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type ii(iiSEXP);
    Rcpp::traits::input_parameter< int >::type ss(ssSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type NI(NISEXP);
    Rcpp::traits::input_parameter< int >::type NS(NSSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index_a(index_aSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index_b(index_bSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index_mu(index_muSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index_sigma(index_sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type wgtM(wgtMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type grad0(grad0SEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_linking_haebara_grad_optim_one_item(theta, prob_theta, aM, bM, a, b, mu, sigma, ii, ss, dist, eps, NI, NS, index_a, index_b, index_mu, index_sigma, wgtM, grad0));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_linking_haebara_grad_optim
Rcpp::NumericVector sirt_rcpp_linking_haebara_grad_optim(int NI, int NS, Rcpp::CharacterVector dist, Rcpp::NumericMatrix aM, Rcpp::NumericMatrix bM, Rcpp::NumericVector theta, Rcpp::NumericVector prob_theta, Rcpp::LogicalMatrix est_pars, Rcpp::NumericMatrix wgtM, Rcpp::NumericVector a, Rcpp::NumericVector b, Rcpp::NumericVector mu, Rcpp::NumericVector sigma, double eps, Rcpp::IntegerVector index_a, Rcpp::IntegerVector index_b, Rcpp::IntegerVector index_mu, Rcpp::IntegerVector index_sigma, Rcpp::CharacterVector parnames, int NP);
RcppExport SEXP _sirt_sirt_rcpp_linking_haebara_grad_optim(SEXP NISEXP, SEXP NSSEXP, SEXP distSEXP, SEXP aMSEXP, SEXP bMSEXP, SEXP thetaSEXP, SEXP prob_thetaSEXP, SEXP est_parsSEXP, SEXP wgtMSEXP, SEXP aSEXP, SEXP bSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP epsSEXP, SEXP index_aSEXP, SEXP index_bSEXP, SEXP index_muSEXP, SEXP index_sigmaSEXP, SEXP parnamesSEXP, SEXP NPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type NI(NISEXP);
    Rcpp::traits::input_parameter< int >::type NS(NSSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type dist(distSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type aM(aMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type bM(bMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prob_theta(prob_thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type est_pars(est_parsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type wgtM(wgtMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index_a(index_aSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index_b(index_bSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index_mu(index_muSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type index_sigma(index_sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type parnames(parnamesSEXP);
    Rcpp::traits::input_parameter< int >::type NP(NPSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_linking_haebara_grad_optim(NI, NS, dist, aM, bM, theta, prob_theta, est_pars, wgtM, a, b, mu, sigma, eps, index_a, index_b, index_mu, index_sigma, parnames, NP));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_monoreg_rowwise
Rcpp::NumericMatrix sirt_rcpp_monoreg_rowwise(Rcpp::NumericMatrix YM, Rcpp::NumericMatrix WM);
RcppExport SEXP _sirt_sirt_rcpp_monoreg_rowwise(SEXP YMSEXP, SEXP WMSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type YM(YMSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type WM(WMSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_monoreg_rowwise(YM, WM));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_noharm_sirt_optim_fn_rcpp
double sirt_rcpp_noharm_sirt_optim_fn_rcpp(Rcpp::NumericMatrix gamma_val, Rcpp::NumericVector delta, int I, Rcpp::NumericMatrix wgtm, Rcpp::NumericMatrix pm, Rcpp::NumericMatrix b0_jk, Rcpp::NumericMatrix b1_jk, Rcpp::NumericMatrix b2_jk, Rcpp::NumericMatrix b3_jk);
RcppExport SEXP _sirt_sirt_rcpp_noharm_sirt_optim_fn_rcpp(SEXP gamma_valSEXP, SEXP deltaSEXP, SEXP ISEXP, SEXP wgtmSEXP, SEXP pmSEXP, SEXP b0_jkSEXP, SEXP b1_jkSEXP, SEXP b2_jkSEXP, SEXP b3_jkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type gamma_val(gamma_valSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type wgtm(wgtmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b0_jk(b0_jkSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b1_jk(b1_jkSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b2_jk(b2_jkSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b3_jk(b3_jkSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_noharm_sirt_optim_fn_rcpp(gamma_val, delta, I, wgtm, pm, b0_jk, b1_jk, b2_jk, b3_jk));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_noharm_sirt_optim_gr_rcpp
Rcpp::List sirt_rcpp_noharm_sirt_optim_gr_rcpp(Rcpp::NumericMatrix gamma_val, int NH, int I, Rcpp::NumericMatrix wgtm, Rcpp::NumericMatrix pm, Rcpp::NumericMatrix b0_jk, Rcpp::NumericMatrix b1_jk, Rcpp::NumericMatrix b2_jk, Rcpp::NumericMatrix b3_jk, int npar, Rcpp::IntegerVector pt_matid, Rcpp::IntegerVector pt_index, Rcpp::IntegerVector pt_row, Rcpp::IntegerVector pt_col, Rcpp::NumericMatrix FP, Rcpp::NumericMatrix Fmat, Rcpp::NumericMatrix Pmat, Rcpp::NumericMatrix Psimat);
RcppExport SEXP _sirt_sirt_rcpp_noharm_sirt_optim_gr_rcpp(SEXP gamma_valSEXP, SEXP NHSEXP, SEXP ISEXP, SEXP wgtmSEXP, SEXP pmSEXP, SEXP b0_jkSEXP, SEXP b1_jkSEXP, SEXP b2_jkSEXP, SEXP b3_jkSEXP, SEXP nparSEXP, SEXP pt_matidSEXP, SEXP pt_indexSEXP, SEXP pt_rowSEXP, SEXP pt_colSEXP, SEXP FPSEXP, SEXP FmatSEXP, SEXP PmatSEXP, SEXP PsimatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type gamma_val(gamma_valSEXP);
    Rcpp::traits::input_parameter< int >::type NH(NHSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type wgtm(wgtmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b0_jk(b0_jkSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b1_jk(b1_jkSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b2_jk(b2_jkSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b3_jk(b3_jkSEXP);
    Rcpp::traits::input_parameter< int >::type npar(nparSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pt_matid(pt_matidSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pt_index(pt_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pt_row(pt_rowSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pt_col(pt_colSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type FP(FPSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Fmat(FmatSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Pmat(PmatSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Psimat(PsimatSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_noharm_sirt_optim_gr_rcpp(gamma_val, NH, I, wgtm, pm, b0_jk, b1_jk, b2_jk, b3_jk, npar, pt_matid, pt_index, pt_row, pt_col, FP, Fmat, Pmat, Psimat));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_pnorm0
double sirt_rcpp_pnorm0(double z);
RcppExport SEXP _sirt_sirt_rcpp_pnorm0(SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_pnorm0(z));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_pnorm
Rcpp::NumericVector sirt_rcpp_pnorm(Rcpp::NumericVector x);
RcppExport SEXP _sirt_sirt_rcpp_pnorm(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_pnorm(x));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_pbvnorm0
double sirt_rcpp_pbvnorm0(double h1, double hk, double r);
RcppExport SEXP _sirt_sirt_rcpp_pbvnorm0(SEXP h1SEXP, SEXP hkSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type hk(hkSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_pbvnorm0(h1, hk, r));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_pbvnorm
Rcpp::NumericVector sirt_rcpp_pbvnorm(Rcpp::NumericVector x, Rcpp::NumericVector y, Rcpp::NumericVector rho);
RcppExport SEXP _sirt_sirt_rcpp_pbvnorm(SEXP xSEXP, SEXP ySEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_pbvnorm(x, y, rho));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_dbvnorm0
double sirt_rcpp_dbvnorm0(double x, double y, double rho, bool use_log);
RcppExport SEXP _sirt_sirt_rcpp_dbvnorm0(SEXP xSEXP, SEXP ySEXP, SEXP rhoSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_dbvnorm0(x, y, rho, use_log));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_dbvnorm
Rcpp::NumericVector sirt_rcpp_dbvnorm(Rcpp::NumericVector x, Rcpp::NumericVector y, Rcpp::NumericVector rho, bool use_log);
RcppExport SEXP _sirt_sirt_rcpp_dbvnorm(SEXP xSEXP, SEXP ySEXP, SEXP rhoSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_dbvnorm(x, y, rho, use_log));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_pbivnorm2
Rcpp::NumericVector sirt_rcpp_pbivnorm2(Rcpp::NumericVector x, Rcpp::NumericVector y, Rcpp::NumericVector rho1);
RcppExport SEXP _sirt_sirt_rcpp_pbivnorm2(SEXP xSEXP, SEXP ySEXP, SEXP rho1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rho1(rho1SEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_pbivnorm2(x, y, rho1));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_dmvnorm_2dim
double sirt_rcpp_dmvnorm_2dim(double x, double y, double rho);
RcppExport SEXP _sirt_sirt_rcpp_dmvnorm_2dim(SEXP xSEXP, SEXP ySEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_dmvnorm_2dim(x, y, rho));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_polychoric2_pbivnorm
double sirt_rcpp_polychoric2_pbivnorm(Rcpp::NumericVector x, Rcpp::NumericVector y, Rcpp::NumericVector rho, int use_pbv);
RcppExport SEXP _sirt_sirt_rcpp_polychoric2_pbivnorm(SEXP xSEXP, SEXP ySEXP, SEXP rhoSEXP, SEXP use_pbvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< int >::type use_pbv(use_pbvSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_polychoric2_pbivnorm(x, y, rho, use_pbv));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_polychoric2_estimating_equation
Rcpp::NumericVector sirt_rcpp_polychoric2_estimating_equation(Rcpp::NumericMatrix frtab, int maxK, Rcpp::NumericVector rho, Rcpp::NumericVector thresh1n, Rcpp::NumericVector thresh2n, int maxK1, int maxK2, int use_pbv);
RcppExport SEXP _sirt_sirt_rcpp_polychoric2_estimating_equation(SEXP frtabSEXP, SEXP maxKSEXP, SEXP rhoSEXP, SEXP thresh1nSEXP, SEXP thresh2nSEXP, SEXP maxK1SEXP, SEXP maxK2SEXP, SEXP use_pbvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type frtab(frtabSEXP);
    Rcpp::traits::input_parameter< int >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type thresh1n(thresh1nSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type thresh2n(thresh2nSEXP);
    Rcpp::traits::input_parameter< int >::type maxK1(maxK1SEXP);
    Rcpp::traits::input_parameter< int >::type maxK2(maxK2SEXP);
    Rcpp::traits::input_parameter< int >::type use_pbv(use_pbvSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_polychoric2_estimating_equation(frtab, maxK, rho, thresh1n, thresh2n, maxK1, maxK2, use_pbv));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_polychoric2_est_itempair
Rcpp::List sirt_rcpp_polychoric2_est_itempair(Rcpp::NumericVector v1, Rcpp::NumericVector v2, int maxK_, int maxiter, int use_pbv, double conv, double rho_init, Rcpp::NumericVector weights);
RcppExport SEXP _sirt_sirt_rcpp_polychoric2_est_itempair(SEXP v1SEXP, SEXP v2SEXP, SEXP maxK_SEXP, SEXP maxiterSEXP, SEXP use_pbvSEXP, SEXP convSEXP, SEXP rho_initSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v1(v1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v2(v2SEXP);
    Rcpp::traits::input_parameter< int >::type maxK_(maxK_SEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type use_pbv(use_pbvSEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< double >::type rho_init(rho_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_polychoric2_est_itempair(v1, v2, maxK_, maxiter, use_pbv, conv, rho_init, weights));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_polychoric2
Rcpp::List sirt_rcpp_polychoric2(Rcpp::NumericMatrix dat, int maxK, int maxiter, int use_pbv, double conv, Rcpp::IntegerMatrix rho_init, Rcpp::NumericVector weights);
RcppExport SEXP _sirt_sirt_rcpp_polychoric2(SEXP datSEXP, SEXP maxKSEXP, SEXP maxiterSEXP, SEXP use_pbvSEXP, SEXP convSEXP, SEXP rho_initSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type use_pbv(use_pbvSEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type rho_init(rho_initSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_polychoric2(dat, maxK, maxiter, use_pbv, conv, rho_init, weights));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_tetrachoric2_rcpp
Rcpp::NumericVector sirt_rcpp_tetrachoric2_rcpp(Rcpp::NumericMatrix dfr, double h, int maxiter);
RcppExport SEXP _sirt_sirt_rcpp_tetrachoric2_rcpp(SEXP dfrSEXP, SEXP hSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dfr(dfrSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_tetrachoric2_rcpp(dfr, h, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_rm_proc_datasets_na_indicators
Rcpp::List sirt_rcpp_rm_proc_datasets_na_indicators(Rcpp::NumericMatrix dat, int K);
RcppExport SEXP _sirt_sirt_rcpp_rm_proc_datasets_na_indicators(SEXP datSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_rm_proc_datasets_na_indicators(dat, K));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_rm_proc_expand_dataset
Rcpp::NumericMatrix sirt_rcpp_rm_proc_expand_dataset(Rcpp::NumericMatrix dat, Rcpp::IntegerVector rater0, Rcpp::IntegerVector pid0, int N, int R);
RcppExport SEXP _sirt_sirt_rcpp_rm_proc_expand_dataset(SEXP datSEXP, SEXP rater0SEXP, SEXP pid0SEXP, SEXP NSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type rater0(rater0SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type pid0(pid0SEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_rm_proc_expand_dataset(dat, rater0, pid0, N, R));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_rm_sdt_posterior
Rcpp::List sirt_rcpp_rm_sdt_posterior(Rcpp::NumericVector prob_item, Rcpp::NumericVector prob_rater, int I0, int K1, int TP, Rcpp::IntegerVector item_index, Rcpp::IntegerMatrix dat2, Rcpp::LogicalMatrix dat2_resp, int I, Rcpp::NumericVector pi_k0);
RcppExport SEXP _sirt_sirt_rcpp_rm_sdt_posterior(SEXP prob_itemSEXP, SEXP prob_raterSEXP, SEXP I0SEXP, SEXP K1SEXP, SEXP TPSEXP, SEXP item_indexSEXP, SEXP dat2SEXP, SEXP dat2_respSEXP, SEXP ISEXP, SEXP pi_k0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prob_item(prob_itemSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prob_rater(prob_raterSEXP);
    Rcpp::traits::input_parameter< int >::type I0(I0SEXP);
    Rcpp::traits::input_parameter< int >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< int >::type TP(TPSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type item_index(item_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat2(dat2SEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type dat2_resp(dat2_respSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pi_k0(pi_k0SEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_rm_sdt_posterior(prob_item, prob_rater, I0, K1, TP, item_index, dat2, dat2_resp, I, pi_k0));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_rm_sdt_calc_gradient_item_deriv_a
Rcpp::NumericVector sirt_rcpp_rm_sdt_calc_gradient_item_deriv_a(Rcpp::NumericVector prob0, Rcpp::IntegerVector prob_D1_dim, Rcpp::NumericVector theta_k);
RcppExport SEXP _sirt_sirt_rcpp_rm_sdt_calc_gradient_item_deriv_a(SEXP prob0SEXP, SEXP prob_D1_dimSEXP, SEXP theta_kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prob0(prob0SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type prob_D1_dim(prob_D1_dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta_k(theta_kSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_rm_sdt_calc_gradient_item_deriv_a(prob0, prob_D1_dim, theta_k));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_rm_sdt_calc_gradient_item_deriv_tau
Rcpp::NumericVector sirt_rcpp_rm_sdt_calc_gradient_item_deriv_tau(Rcpp::NumericVector prob0, Rcpp::IntegerVector prob_D1_dim, int cat_pp);
RcppExport SEXP _sirt_sirt_rcpp_rm_sdt_calc_gradient_item_deriv_tau(SEXP prob0SEXP, SEXP prob_D1_dimSEXP, SEXP cat_ppSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type prob0(prob0SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type prob_D1_dim(prob_D1_dimSEXP);
    Rcpp::traits::input_parameter< int >::type cat_pp(cat_ppSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_rm_sdt_calc_gradient_item_deriv_tau(prob0, prob_D1_dim, cat_pp));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_rm_sdt_calc_gradient_likelihood_item_llgrad
Rcpp::NumericVector sirt_rcpp_rm_sdt_calc_gradient_likelihood_item_llgrad(Rcpp::NumericVector logprob_D1, Rcpp::IntegerVector prob_D1_dim, Rcpp::NumericVector nik_item);
RcppExport SEXP _sirt_sirt_rcpp_rm_sdt_calc_gradient_likelihood_item_llgrad(SEXP logprob_D1SEXP, SEXP prob_D1_dimSEXP, SEXP nik_itemSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type logprob_D1(logprob_D1SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type prob_D1_dim(prob_D1_dimSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type nik_item(nik_itemSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_rm_sdt_calc_gradient_likelihood_item_llgrad(logprob_D1, prob_D1_dim, nik_item));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_squeeze_eps
Rcpp::NumericVector sirt_rcpp_squeeze_eps(Rcpp::NumericVector x, double eps);
RcppExport SEXP _sirt_sirt_rcpp_squeeze_eps(SEXP xSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_squeeze_eps(x, eps));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_log
Rcpp::NumericVector sirt_rcpp_log(Rcpp::NumericVector x);
RcppExport SEXP _sirt_sirt_rcpp_log(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_log(x));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_plogis
double sirt_rcpp_plogis(double x);
RcppExport SEXP _sirt_sirt_rcpp_plogis(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_plogis(x));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_rm_sdt_calc_probs_gpcm
Rcpp::NumericVector sirt_rcpp_rm_sdt_calc_probs_gpcm(Rcpp::NumericVector a, Rcpp::NumericMatrix tau, Rcpp::NumericVector theta_k, int VV, int K1, int TP, double eps, bool use_log);
RcppExport SEXP _sirt_sirt_rcpp_rm_sdt_calc_probs_gpcm(SEXP aSEXP, SEXP tauSEXP, SEXP theta_kSEXP, SEXP VVSEXP, SEXP K1SEXP, SEXP TPSEXP, SEXP epsSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta_k(theta_kSEXP);
    Rcpp::traits::input_parameter< int >::type VV(VVSEXP);
    Rcpp::traits::input_parameter< int >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< int >::type TP(TPSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_rm_sdt_calc_probs_gpcm(a, tau, theta_k, VV, K1, TP, eps, use_log));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_rm_sdt_calc_probs_grm_rater
Rcpp::NumericVector sirt_rcpp_rm_sdt_calc_probs_grm_rater(Rcpp::NumericMatrix c_rater, Rcpp::NumericVector d_rater, int I, int K, double eps, bool use_log);
RcppExport SEXP _sirt_sirt_rcpp_rm_sdt_calc_probs_grm_rater(SEXP c_raterSEXP, SEXP d_raterSEXP, SEXP ISEXP, SEXP KSEXP, SEXP epsSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type c_rater(c_raterSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type d_rater(d_raterSEXP);
    Rcpp::traits::input_parameter< int >::type I(ISEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_rm_sdt_calc_probs_grm_rater(c_rater, d_rater, I, K, eps, use_log));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_rm_sdt_calc_probs_grm_item
Rcpp::NumericVector sirt_rcpp_rm_sdt_calc_probs_grm_item(Rcpp::NumericMatrix tau_item, Rcpp::NumericVector a_item, Rcpp::NumericVector theta_k, int VV, int K, int TP, double eps, bool use_log);
RcppExport SEXP _sirt_sirt_rcpp_rm_sdt_calc_probs_grm_item(SEXP tau_itemSEXP, SEXP a_itemSEXP, SEXP theta_kSEXP, SEXP VVSEXP, SEXP KSEXP, SEXP TPSEXP, SEXP epsSEXP, SEXP use_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type tau_item(tau_itemSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a_item(a_itemSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type theta_k(theta_kSEXP);
    Rcpp::traits::input_parameter< int >::type VV(VVSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type TP(TPSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type use_log(use_logSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_rm_sdt_calc_probs_grm_item(tau_item, a_item, theta_k, VV, K, TP, eps, use_log));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_xxirt_compute_posterior_expected_counts
Rcpp::NumericMatrix sirt_rcpp_xxirt_compute_posterior_expected_counts(Rcpp::LogicalMatrix dat1_resp_gg, Rcpp::NumericMatrix p_aj_xi_gg);
RcppExport SEXP _sirt_sirt_rcpp_xxirt_compute_posterior_expected_counts(SEXP dat1_resp_ggSEXP, SEXP p_aj_xi_ggSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type dat1_resp_gg(dat1_resp_ggSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type p_aj_xi_gg(p_aj_xi_ggSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_xxirt_compute_posterior_expected_counts(dat1_resp_gg, p_aj_xi_gg));
    return rcpp_result_gen;
END_RCPP
}
// sirt_rcpp_xxirt_compute_likelihood
Rcpp::NumericMatrix sirt_rcpp_xxirt_compute_likelihood(Rcpp::IntegerMatrix dat, Rcpp::LogicalMatrix dat_resp_bool, Rcpp::NumericMatrix probs, int TP, int maxK);
RcppExport SEXP _sirt_sirt_rcpp_xxirt_compute_likelihood(SEXP datSEXP, SEXP dat_resp_boolSEXP, SEXP probsSEXP, SEXP TPSEXP, SEXP maxKSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalMatrix >::type dat_resp_bool(dat_resp_boolSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< int >::type TP(TPSEXP);
    Rcpp::traits::input_parameter< int >::type maxK(maxKSEXP);
    rcpp_result_gen = Rcpp::wrap(sirt_rcpp_xxirt_compute_likelihood(dat, dat_resp_bool, probs, TP, maxK));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sirt_gooijer_csn_table", (DL_FUNC) &_sirt_gooijer_csn_table, 7},
    {"_sirt_isop_tests_C", (DL_FUNC) &_sirt_isop_tests_C, 5},
    {"_sirt_interval_index_C", (DL_FUNC) &_sirt_interval_index_C, 2},
    {"_sirt_rowCumsums2_source", (DL_FUNC) &_sirt_rowCumsums2_source, 1},
    {"_sirt_rowKSmallest_C", (DL_FUNC) &_sirt_rowKSmallest_C, 4},
    {"_sirt_rowMaxsCPP_source", (DL_FUNC) &_sirt_rowMaxsCPP_source, 1},
    {"_sirt_rowmins2_bundle_C", (DL_FUNC) &_sirt_rowmins2_bundle_C, 2},
    {"_sirt_calc_copula_itemcluster_C", (DL_FUNC) &_sirt_calc_copula_itemcluster_C, 2},
    {"_sirt_md_pattern_csource", (DL_FUNC) &_sirt_md_pattern_csource, 1},
    {"_sirt_mle_pcm_group_C", (DL_FUNC) &_sirt_mle_pcm_group_C, 9},
    {"_sirt_mle_pcm_C", (DL_FUNC) &_sirt_mle_pcm_C, 8},
    {"_sirt_probs_pcm_groups_C", (DL_FUNC) &_sirt_probs_pcm_groups_C, 6},
    {"_sirt_probs_pcm_nogroups_C", (DL_FUNC) &_sirt_probs_pcm_nogroups_C, 5},
    {"_sirt_calccounts_pcm_groups_C", (DL_FUNC) &_sirt_calccounts_pcm_groups_C, 7},
    {"_sirt_sirt_rcpp_array_mult", (DL_FUNC) &_sirt_sirt_rcpp_array_mult, 4},
    {"_sirt_RM_CALCPOST", (DL_FUNC) &_sirt_RM_CALCPOST, 4},
    {"_sirt_rm_probraterfct1", (DL_FUNC) &_sirt_rm_probraterfct1, 5},
    {"_sirt_rm_facets_calcprobs_cpp", (DL_FUNC) &_sirt_rm_facets_calcprobs_cpp, 12},
    {"_sirt_SMIRT_CALCPOST", (DL_FUNC) &_sirt_SMIRT_CALCPOST, 6},
    {"_sirt_SMIRT_CALCPROB_COMP", (DL_FUNC) &_sirt_SMIRT_CALCPROB_COMP, 6},
    {"_sirt_SMIRT_CALCPROB_NONCOMP", (DL_FUNC) &_sirt_SMIRT_CALCPROB_NONCOMP, 6},
    {"_sirt_SMIRT_CALCPROB_PARTCOMP", (DL_FUNC) &_sirt_SMIRT_CALCPROB_PARTCOMP, 7},
    {"_sirt_MML2_RASCHTYPE_COUNTS", (DL_FUNC) &_sirt_MML2_RASCHTYPE_COUNTS, 6},
    {"_sirt_MML2_CALCPOST_V1", (DL_FUNC) &_sirt_MML2_CALCPOST_V1, 3},
    {"_sirt_MML2_CALCPOST_V2", (DL_FUNC) &_sirt_MML2_CALCPOST_V2, 3},
    {"_sirt_MML2_CALCPOST_V3", (DL_FUNC) &_sirt_MML2_CALCPOST_V3, 3},
    {"_sirt_sirt_rcpp_first_eigenvalue", (DL_FUNC) &_sirt_sirt_rcpp_first_eigenvalue, 4},
    {"_sirt_sirt_rcpp_D_eigenvalues", (DL_FUNC) &_sirt_sirt_rcpp_D_eigenvalues, 4},
    {"_sirt_sirt_rcpp_choppin_row_averaging", (DL_FUNC) &_sirt_sirt_rcpp_choppin_row_averaging, 3},
    {"_sirt_sirt_rcpp_evm_compute", (DL_FUNC) &_sirt_sirt_rcpp_evm_compute, 6},
    {"_sirt_sirt_rcpp_evm_comp_poly", (DL_FUNC) &_sirt_sirt_rcpp_evm_comp_poly, 9},
    {"_sirt_sirt_rcpp_gom_em_calcpost", (DL_FUNC) &_sirt_sirt_rcpp_gom_em_calcpost, 7},
    {"_sirt_sirt_rcpp_gom_em_likelihood", (DL_FUNC) &_sirt_sirt_rcpp_gom_em_likelihood, 5},
    {"_sirt_sirt_rcpp_gom_em_log_likelihood", (DL_FUNC) &_sirt_sirt_rcpp_gom_em_log_likelihood, 3},
    {"_sirt_sirt_rcpp_gom_em_loglike_gradient", (DL_FUNC) &_sirt_sirt_rcpp_gom_em_loglike_gradient, 10},
    {"_sirt_sirt_rcpp_inference_jackknife", (DL_FUNC) &_sirt_sirt_rcpp_inference_jackknife, 1},
    {"_sirt_sirt_rcpp_invariance_alignment_lambda_transformed", (DL_FUNC) &_sirt_sirt_rcpp_invariance_alignment_lambda_transformed, 2},
    {"_sirt_sirt_rcpp_invariance_alignment_nu_transformed", (DL_FUNC) &_sirt_sirt_rcpp_invariance_alignment_nu_transformed, 5},
    {"_sirt_sirt_rcpp_invariance_alignment_simplicity_function_value", (DL_FUNC) &_sirt_sirt_rcpp_invariance_alignment_simplicity_function_value, 6},
    {"_sirt_sirt_rcpp_invariance_alignment_opt_fct", (DL_FUNC) &_sirt_sirt_rcpp_invariance_alignment_opt_fct, 12},
    {"_sirt_sirt_rcpp_invariance_alignment_simplicity_function_gradient", (DL_FUNC) &_sirt_sirt_rcpp_invariance_alignment_simplicity_function_gradient, 6},
    {"_sirt_sirt_rcpp_invariance_alignment_opt_grad", (DL_FUNC) &_sirt_sirt_rcpp_invariance_alignment_opt_grad, 12},
    {"_sirt_sirt_rcpp_linking_haebara_fct_optim_one_item", (DL_FUNC) &_sirt_sirt_rcpp_linking_haebara_fct_optim_one_item, 12},
    {"_sirt_sirt_rcpp_linking_haebara_fct_optim", (DL_FUNC) &_sirt_sirt_rcpp_linking_haebara_fct_optim, 14},
    {"_sirt_sirt_rcpp_linking_haebara_grad_optim_one_item", (DL_FUNC) &_sirt_sirt_rcpp_linking_haebara_grad_optim_one_item, 20},
    {"_sirt_sirt_rcpp_linking_haebara_grad_optim", (DL_FUNC) &_sirt_sirt_rcpp_linking_haebara_grad_optim, 20},
    {"_sirt_sirt_rcpp_monoreg_rowwise", (DL_FUNC) &_sirt_sirt_rcpp_monoreg_rowwise, 2},
    {"_sirt_sirt_rcpp_noharm_sirt_optim_fn_rcpp", (DL_FUNC) &_sirt_sirt_rcpp_noharm_sirt_optim_fn_rcpp, 9},
    {"_sirt_sirt_rcpp_noharm_sirt_optim_gr_rcpp", (DL_FUNC) &_sirt_sirt_rcpp_noharm_sirt_optim_gr_rcpp, 18},
    {"_sirt_sirt_rcpp_pnorm0", (DL_FUNC) &_sirt_sirt_rcpp_pnorm0, 1},
    {"_sirt_sirt_rcpp_pnorm", (DL_FUNC) &_sirt_sirt_rcpp_pnorm, 1},
    {"_sirt_sirt_rcpp_pbvnorm0", (DL_FUNC) &_sirt_sirt_rcpp_pbvnorm0, 3},
    {"_sirt_sirt_rcpp_pbvnorm", (DL_FUNC) &_sirt_sirt_rcpp_pbvnorm, 3},
    {"_sirt_sirt_rcpp_dbvnorm0", (DL_FUNC) &_sirt_sirt_rcpp_dbvnorm0, 4},
    {"_sirt_sirt_rcpp_dbvnorm", (DL_FUNC) &_sirt_sirt_rcpp_dbvnorm, 4},
    {"_sirt_sirt_rcpp_pbivnorm2", (DL_FUNC) &_sirt_sirt_rcpp_pbivnorm2, 3},
    {"_sirt_sirt_rcpp_dmvnorm_2dim", (DL_FUNC) &_sirt_sirt_rcpp_dmvnorm_2dim, 3},
    {"_sirt_sirt_rcpp_polychoric2_pbivnorm", (DL_FUNC) &_sirt_sirt_rcpp_polychoric2_pbivnorm, 4},
    {"_sirt_sirt_rcpp_polychoric2_estimating_equation", (DL_FUNC) &_sirt_sirt_rcpp_polychoric2_estimating_equation, 8},
    {"_sirt_sirt_rcpp_polychoric2_est_itempair", (DL_FUNC) &_sirt_sirt_rcpp_polychoric2_est_itempair, 8},
    {"_sirt_sirt_rcpp_polychoric2", (DL_FUNC) &_sirt_sirt_rcpp_polychoric2, 7},
    {"_sirt_sirt_rcpp_tetrachoric2_rcpp", (DL_FUNC) &_sirt_sirt_rcpp_tetrachoric2_rcpp, 3},
    {"_sirt_sirt_rcpp_rm_proc_datasets_na_indicators", (DL_FUNC) &_sirt_sirt_rcpp_rm_proc_datasets_na_indicators, 2},
    {"_sirt_sirt_rcpp_rm_proc_expand_dataset", (DL_FUNC) &_sirt_sirt_rcpp_rm_proc_expand_dataset, 5},
    {"_sirt_sirt_rcpp_rm_sdt_posterior", (DL_FUNC) &_sirt_sirt_rcpp_rm_sdt_posterior, 10},
    {"_sirt_sirt_rcpp_rm_sdt_calc_gradient_item_deriv_a", (DL_FUNC) &_sirt_sirt_rcpp_rm_sdt_calc_gradient_item_deriv_a, 3},
    {"_sirt_sirt_rcpp_rm_sdt_calc_gradient_item_deriv_tau", (DL_FUNC) &_sirt_sirt_rcpp_rm_sdt_calc_gradient_item_deriv_tau, 3},
    {"_sirt_sirt_rcpp_rm_sdt_calc_gradient_likelihood_item_llgrad", (DL_FUNC) &_sirt_sirt_rcpp_rm_sdt_calc_gradient_likelihood_item_llgrad, 3},
    {"_sirt_sirt_rcpp_squeeze_eps", (DL_FUNC) &_sirt_sirt_rcpp_squeeze_eps, 2},
    {"_sirt_sirt_rcpp_log", (DL_FUNC) &_sirt_sirt_rcpp_log, 1},
    {"_sirt_sirt_rcpp_plogis", (DL_FUNC) &_sirt_sirt_rcpp_plogis, 1},
    {"_sirt_sirt_rcpp_rm_sdt_calc_probs_gpcm", (DL_FUNC) &_sirt_sirt_rcpp_rm_sdt_calc_probs_gpcm, 8},
    {"_sirt_sirt_rcpp_rm_sdt_calc_probs_grm_rater", (DL_FUNC) &_sirt_sirt_rcpp_rm_sdt_calc_probs_grm_rater, 6},
    {"_sirt_sirt_rcpp_rm_sdt_calc_probs_grm_item", (DL_FUNC) &_sirt_sirt_rcpp_rm_sdt_calc_probs_grm_item, 8},
    {"_sirt_sirt_rcpp_xxirt_compute_posterior_expected_counts", (DL_FUNC) &_sirt_sirt_rcpp_xxirt_compute_posterior_expected_counts, 2},
    {"_sirt_sirt_rcpp_xxirt_compute_likelihood", (DL_FUNC) &_sirt_sirt_rcpp_xxirt_compute_likelihood, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_sirt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
